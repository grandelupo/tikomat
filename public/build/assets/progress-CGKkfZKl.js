import{c as $,a as I}from"./createLucideIcon-BElLvHrh.js";import{r as u,j as i}from"./app-DUV9x1cR.js";import{c as A}from"./index-C5VeTfub.js";import{P as m}from"./index-DUCfaHzZ.js";/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const _=[["path",{d:"M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2",key:"169zse"}]],G=$("Activity",_);var d="Progress",c=100,[E,X]=A(d),[R,j]=E(d),f=u.forwardRef((r,e)=>{const{__scopeProgress:n,value:o=null,max:a,getValueLabel:b=w,...h}=r;(a||a===0)&&!p(a)&&console.error(M(`${a}`,"Progress"));const t=p(a)?a:c;o!==null&&!v(o,t)&&console.error(L(`${o}`,"Progress"));const s=v(o,t)?o:null,y=l(s)?b(s,t):void 0;return i.jsx(R,{scope:n,value:s,max:t,children:i.jsx(m.div,{"aria-valuemax":t,"aria-valuemin":0,"aria-valuenow":l(s)?s:void 0,"aria-valuetext":y,role:"progressbar","data-state":P(s,t),"data-value":s??void 0,"data-max":t,...h,ref:e})})});f.displayName=d;var g="ProgressIndicator",x=u.forwardRef((r,e)=>{const{__scopeProgress:n,...o}=r,a=j(g,n);return i.jsx(m.div,{"data-state":P(a.value,a.max),"data-value":a.value??void 0,"data-max":a.max,...o,ref:e})});x.displayName=g;function w(r,e){return`${Math.round(r/e*100)}%`}function P(r,e){return r==null?"indeterminate":r===e?"complete":"loading"}function l(r){return typeof r=="number"}function p(r){return l(r)&&!isNaN(r)&&r>0}function v(r,e){return l(r)&&!isNaN(r)&&r<=e&&r>=0}function M(r,e){return`Invalid prop \`max\` of value \`${r}\` supplied to \`${e}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${c}\`.`}function L(r,e){return`Invalid prop \`value\` of value \`${r}\` supplied to \`${e}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${c} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var N=f,V=x;const S=u.forwardRef(({className:r,value:e,...n},o)=>i.jsx(N,{ref:o,className:I("relative h-4 w-full overflow-hidden rounded-full bg-secondary",r),...n,children:i.jsx(V,{className:"h-full w-full flex-1 bg-primary transition-all",style:{transform:`translateX(-${100-(e||0)}%)`}})}));S.displayName=N.displayName;export{G as A,S as P};
